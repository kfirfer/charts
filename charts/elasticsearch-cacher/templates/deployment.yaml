{{- $fullName := include "elasticsearch-cacher.fullname" . -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "elasticsearch-cacher.fullname" . }}
  labels:
{{- include "elasticsearch-cacher.labels" . | nindent 4 }}
{{- if .Values.annotations }}
  annotations:
{{ toYaml .Values.annotations | indent 4 }}
{{- end }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  strategy:
    rollingUpdate:
      maxSurge: {{ .Values.strategy.rollingUpdate.maxSurge }}
      maxUnavailable: {{ .Values.strategy.rollingUpdate.maxUnavailable }}
  selector:
    matchLabels:
      {{- include "elasticsearch-cacher.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "elasticsearch-cacher.selectorLabels" . | nindent 8 }}
        version: "{{ .Values.image.tag | default .Chart.AppVersion }}"
        {{- if .Values.podLabels }}
          {{- toYaml .Values.podLabels | nindent 8 }}
        {{- end }}
      {{- if .Values.podAnnotations }}
      annotations:
      {{- with .Values.podAnnotations }}
{{- toYaml . | nindent 8 }}
      {{- end }}
      {{- end }}
    spec:
      automountServiceAccountToken: {{ .Values.serviceAccount.automountToken }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "elasticsearch-cacher.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- with  .Values.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- tpl . $ | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.command }}
          command:
{{ toYaml .Values.command | indent 12 }}
          {{- end }}
          {{- if or .Values.metrics.enabled .Values.service.enabled }}
          ports:
            {{- if .Values.service.enabled }}
            - name: {{ .Values.service.name }}
              containerPort: {{ .Values.containerPort }}
              protocol: {{ .Values.service.protocol }}
            {{- end }}
            {{- if .Values.metrics.enabled }}
            - name: metrics
              containerPort: {{ .Values.metrics.port }}
              protocol: TCP
            {{- end }}
            {{- if .Values.debug.enabled }}
            - name: debug
              containerPort: {{ .Values.debug.port }}
              protocol: TCP
            {{- end }}
          {{- end}}
          envFrom:
            - configMapRef:
                name: {{ template "elasticsearch-cacher.fullname" . }}-env
            - secretRef:
                name: {{ template "elasticsearch-cacher.fullname" . }}-secret-env
          env:
            - name: APPLICATION_NAME
              value: "{{ template "elasticsearch-cacher.fullname" . }}"
            - name: NAMESPACE_NAME
              value: "{{ .Release.Namespace }}"
          {{- if or .Values.extraVolumeMounts .Values.config }}
          volumeMounts:
            {{- if .Values.extraVolumeMounts }}
            {{- toYaml .Values.extraVolumeMounts | nindent 12 }}
            {{- end }}
          {{- range $path, $config := .Values.config }}
            - name: {{ $fullName }}
              mountPath: /app/conf/{{ $path }}
              subPath: {{ $path }}
          {{- end -}}
          {{- end }}
          {{- with .Values.lifecycle }}
          lifecycle:
          {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.livenessProbe.httpGet.path }}
              port: {{ .Values.livenessProbe.httpGet.port }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.readinessProbe.httpGet.path }}
              port: {{ .Values.readinessProbe.httpGet.port }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.startupProbe.enabled }}
          startupProbe:
            httpGet:
              path: {{ .Values.startupProbe.httpGet.path }}
              port: {{ .Values.startupProbe.httpGet.port }}
            initialDelaySeconds: {{ .Values.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.startupProbe.periodSeconds }}
            failureThreshold: {{ .Values.startupProbe.failureThreshold }}
            successThreshold: {{ .Values.startupProbe.successThreshold }}
            timeoutSeconds: {{ .Values.startupProbe.timeoutSeconds }}
            {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- if .Values.extraContainers }}
        {{ toYaml .Values.extraContainers | nindent 8 }}
      {{- end }}
      dnsPolicy: {{ .Values.dnsPolicy }}
{{- if .Values.initContainers }}
      initContainers:
        {{- if eq (typeOf .Values.initContainers) "string" }}
        {{- tpl .Values.initContainers . | nindent 8 }}
        {{- else }}
        {{- toYaml .Values.initContainers | nindent 8 }}
        {{- end }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if or .Values.extraVolumes .Values.config }}
      volumes:
        {{- if .Values.extraVolumes }}
        {{- toYaml .Values.extraVolumes | nindent 8 }}
        {{- end }}
        {{- if .Values.config }}
        - name: {{ template "elasticsearch-cacher.fullname" . }}
          secret:
            secretName: {{ template "elasticsearch-cacher.fullname" . }}
        {{- end }}
      {{- end }}
      {{- if or (.Values.affinity) (.Values.antiAffinity) }}
      affinity:
        {{- if .Values.affinity }}
        {{- if eq (typeOf .Values.affinity) "string" }}
        {{- tpl .Values.affinity . | nindent 8 }}
        {{- else }}
        {{- toYaml .Values.affinity | nindent 8 }}
        {{- end }}
        {{- end }}
        {{- if eq .Values.antiAffinity "hard" }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/name: {{ template "elasticsearch-cacher.name" . }}
                  namespace: {{ .Release.Namespace }}
              topologyKey: {{ .Values.antiAffinityTopologyKey }}
        {{- else if eq .Values.antiAffinity "soft" }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: {{ .Values.weight }}
              podAffinityTerm:
                topologyKey: {{ .Values.antiAffinityTopologyKey }}
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: {{ template "elasticsearch-cacher.name" . }}
                    namespace: {{ .Release.Namespace }}
      {{- end }}
      {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
